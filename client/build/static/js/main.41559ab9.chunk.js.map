{"version":3,"sources":["utils/hooks.js","context/auth.js","pages/Login/Login.js","pages/Register/Register.js","components/LikeButton.js","components/DeleteButton.js","pages/Post/Post.js","utils/graphql.js","components/PostForm.js","pages/Home/Home.js","components/NavBar.js","utils/AuthRoute.js","pages/SinglePost.js","App.js","reportWebVitals.js","ApolloProvider.js","index.js"],"names":["useForm","callback","intialState","useState","values","setValues","onChange","event","target","name","value","onSubmit","preventDefault","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","console","log","AuthProvider","props","useReducer","dispatch","Provider","setItem","token","LOGIN_USER","gql","Login","context","useContext","error","setError","username","password","useMutation","update","_","result","data","history","push","onError","err","graphQLErrors","extensions","exception","errors","variables","loading","className","Form","noValidate","Input","label","placeholder","Button","primary","Object","keys","length","map","REGISTER_USER","Register","addUser","email","confirmPassword","register","LIKE_POST_MUTATION","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","postId","likePost","likeButton","color","Icon","basic","as","Link","to","labelPosition","onClick","Label","pointing","DELETE_POST_MUTATION","DeleteButton","confirmOpen","setConfirmOpen","deletePost","floated","clearing","segment","size","Confirm","open","onCancel","onConfirm","DELETE_POST","Post","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","FETCH_POSTS_QUERY","PostForm","CREATE_POST_MUTATION","proxy","readQuery","query","getPosts","createPost","writeQuery","a","Field","FormInput","style","marginBottom","message","Home","useLazyQuery","fetchPolicy","fetchPostData","Grid","columns","divided","Row","Column","refreshPosts","Transition","Group","NavBar","handleItemClick","e","setActiveItem","pathname","window","location","path","substr","activeItem","Menu","secondary","Item","active","position","AuthRoute","Component","component","rest","render","FETCH_POST_QUERY","SinglePost","match","params","postMarkup","useQuery","getPost","comments","width","labelPositon","App","Container","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","httpLink","HttpLink","uri","authLink","ApolloLink","operation","forward","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.41559ab9.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport const useForm = (callback, intialState = {} ) => {\n    const [values, setValues] = useState(intialState);\n\n    const onChange = event => {\n        setValues({...values, [event.target.name] : event.target.value})\n    };\n\n\n    const onSubmit = event => {\n        event.preventDefault();\n        callback();\n    }\n\n    return {\n        onChange,\n        onSubmit,\n        values\n    }\n}","import React, { useReducer, createContext} from 'react';\nimport jwtDecode from 'jwt-decode'\n\nconst initialState = {\n    user : null\n}\nif(localStorage.getItem('jwtToken')){\n    const decodedToken = jwtDecode(localStorage.getItem('jwtToken'))\n    if(decodedToken.exp * 1000 < Date.now()){\n        localStorage.removeItem('jwtToken')\n    }else{\n        initialState.user = decodedToken;\n    }\n}\nconst AuthContext = createContext({\n    user : null,\n    login : userData => {},\n    logout : () => {}\n})\n\nfunction authReducer(state, action){\n    switch(action.type){\n        case \"LOGIN\":\n            return {\n                ...state,\n                user : action.payload\n            }\n        case \"LOGOUT\":\n            console.log(\"INSIDE LOGOUT METHOD UIN THE REDUCER\")\n            return {\n                ...state,\n                user : null\n            }\n        default:\n            return state\n    }\n}\n\nfunction AuthProvider(props){\n    const [state, dispatch] = useReducer(authReducer, initialState)\n    function login(userData){\n        localStorage.setItem(\"jwtToken\",userData.token)\n        dispatch({\n            type : 'LOGIN',\n            payload : userData\n        })\n    }\n\n    function logout(){\n        console.log(\"INSIDE LOGOUT METHOD\")\n        localStorage.removeItem('jwtToken')\n        dispatch({\n            type : \"LOGOUT\"\n        })\n    }\n\n    return (\n        <AuthContext.Provider \n        value={{user : state.user ,login, logout}}\n        {...props}\n        />\n    )\n}\n\nexport {AuthContext, AuthProvider}\n","import React, {useContext, useState} from 'react';\nimport {useMutation, gql} from '@apollo/client';\nimport { Redirect } from 'react-router';\nimport { useForm } from '../../utils/hooks'\nimport { Form , Button} from 'semantic-ui-react';\nimport './Login.css'\nimport {AuthContext} from '../../context/auth'\n\nconst Login = props =>{ \n    const context = useContext(AuthContext)\n    const [error , setError] = useState({})\n    const { onChange, onSubmit , values} = useForm(loginUser, {\n        username : '',\n        password :'',\n    })\n   \n    const [login, {loading}] = useMutation(LOGIN_USER, {\n        update(_, result){\n            console.log(result)\n            context.login(result.data.login)\n            props.history.push(\"/\")\n        },\n        onError(err){\n            setError(err.graphQLErrors[0]?.extensions.exception.errors);   \n        },\n        variables : values\n        \n    })\n    \n    function loginUser(){\n        login()\n    }\n    \n    return (\n        <div className=\"Login\">\n            <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : ''}>\n                <h1>Login</h1>\n                <Form.Input\n                    label='Username'\n                    placeholder='Username..'\n                    name=\"username\"\n                    value={values.username}\n                    error={error.username ? true : false}\n                    onChange={onChange}>\n\n                </Form.Input>\n                <Form.Input\n                    label='Password'\n                    placeholder='Password..'\n                    name=\"password\"\n                    value={values.password}\n                    error={error.password ? true : false}\n                    type=\"password\"\n                    onChange={onChange}>\n\n                </Form.Input>\n                <Button type=\"submit\" primary>Login</Button>\n            </Form>\n\n            {Object.keys(error).length ?\n                <div className=\"ui error message\">\n                    <ul className=\"list\">\n                        {Object.values(error).map(value => {\n                            return <li key={value}>{value}</li>\n                        })}\n                    </ul>\n                </div>\n                :\n                null\n            }\n        </div>\n    )\n}\n\nconst LOGIN_USER= gql`\nmutation login(\n    $username : String!,\n    $password : String!\n){\n    login(\n        username : $username,\n        password : $password,\n    ){\n        id email username createdAt token\n    }\n}`\n\n\nexport default Login;","import React, {useState, useContext} from 'react';\nimport {useMutation, gql} from '@apollo/client';\nimport { Form , Button} from 'semantic-ui-react'\nimport {useForm} from '../../utils/hooks'\nimport {AuthContext } from '../../context/auth'\nimport './Register.css';\n\nconst Register = props =>{\n    const context = useContext(AuthContext)\n    const [error , setError] = useState({})\n    const { onChange, onSubmit , values} = useForm(registerUser, {\n        username : '',\n        password :'',\n        email : '',\n        confirmPassword :''\n    \n    })\n   \n    const [addUser, {loading}] = useMutation(REGISTER_USER, {\n        update(_, result){ \n            context.login(result.data.register)\n            props.history.push(\"/\")\n        },\n        onError(err){\n            setError(err.graphQLErrors[0]?.extensions.exception.errors);   \n        },\n        variables : values\n        \n    })\n    \n    function registerUser(){\n        addUser()\n    }\n    \n    return (\n        <div className=\"Register\">\n            <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : ''}>\n                <h1>Register</h1>\n                <Form.Input\n                    label='Username'\n                    placeholder='Username..'\n                    name=\"username\"\n                    value={values.username}\n                    error={error.username ? true : false}\n                    onChange={onChange}>\n\n                </Form.Input>\n                <Form.Input\n                    label='Email'\n                    placeholder='Email..'\n                    name=\"email\"\n                    value={values.email}\n                    error={error.email ? true : false}\n                    onChange={onChange}>\n\n                </Form.Input>\n                <Form.Input\n                    label='Password'\n                    placeholder='Password..'\n                    name=\"password\"\n                    value={values.password}\n                    error={error.password ? true : false}\n                    type=\"password\"\n                    onChange={onChange}>\n\n                </Form.Input>\n                <Form.Input\n                    label='Confirm Password'\n                    placeholder='Confirm Password ..'\n                    name=\"confirmPassword\"\n                    value={values.confirmPassword}\n                    error={error.confirmPassword ? true : false}\n                    type=\"password\"\n                    onChange={onChange}>\n\n                </Form.Input>\n                \n                <Button type=\"submit\" primary>Register</Button>\n\n            </Form>\n           \n            {Object.keys(error).length ?\n                <div className=\"ui error message\">\n                    <ul className=\"list\">\n                        {Object.values(error).map(value => {\n                            return <li key={value}>{value}</li>\n                        })}\n                    </ul>\n                </div>\n                :\n                null\n            }\n        </div>\n    )\n}\n\nconst REGISTER_USER= gql`\nmutation register(\n    $username : String!,\n    $email : String!,\n    $password : String!,\n    $confirmPassword : String!,\n){\n    register(registerInput : {\n        username : $username,\n        email : $email,\n        password : $password,\n        confirmPassword : $confirmPassword\n    }){\n        id email username createdAt token\n    }\n}`\nexport default Register;","import React, {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport {useMutation, gql} from '@apollo/client';\nimport {  Icon, Label,  Button} from 'semantic-ui-react'\n\nconst LikeButton = (props) => {\n    const {\n        id, likeCount, likes\n    } = props.post;\n    const user = props.user\n\n    const [liked, setLiked] = useState(false)\n    useEffect( () => {\n        if(user && likes.find(like => like.username === user.username)){\n            setLiked(true)\n        } else {\n            setLiked(false)\n        }\n    }, [user, likes]);\n\n    const [ likePost] = useMutation(LIKE_POST_MUTATION, {\n        variables : { postId : id}\n    })\n\n    const likeButton = user ? (\n        liked ? (\n            <Button color='teal'>\n                <Icon name=\"heart\"></Icon>\n            </Button>\n        ) : (\n            <Button color='teal' basic>\n                <Icon name=\"heart\"></Icon>\n            </Button>\n        ))\n        :(\n        <Button as={Link} to='/login' color='teal' basic>\n                <Icon name=\"heart\"></Icon>\n        </Button>)\n\n    return (\n        <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\n            {likeButton}\n            <Label basic color='teal' pointing='left'>\n                {likeCount}\n            </Label>\n        </Button>\n    )\n}\n\nconst LIKE_POST_MUTATION = gql`\n    mutation likePost($postId : ID!){\n        likePost(postId : $postId){\n            id\n            likes{\n                id \n                username\n            }\n            likeCount\n        }\n    }\n`\n\nexport default LikeButton","import React, {useState} from 'react';\nimport {gql, useMutation} from '@apollo/client';\nimport { Button, Icon, Confirm} from 'semantic-ui-react';\n\nconst DeleteButton = ({postId, callback}) => {\n    const [confirmOpen, setConfirmOpen] = useState(false)\n    const [ deletePost] = useMutation(DELETE_POST_MUTATION, {\n        update(){\n            setConfirmOpen(false)\n            // TODO remove post from cache\n            console.log(\"INSIDE DELETE UPDATE\")\n            if(callback){\n                callback();\n            }\n\n        },\n        variables : {\n            postId \n        }\n    })\n    return (\n        <>\n            <Button color='red' floated=\"right\" clearing segment size=\"tiny\" basic onClick={()=>setConfirmOpen(true)}>\n                <Icon name='trash' />\n            </Button>\n            <Confirm\n                open={confirmOpen}\n                onCancel={() => setConfirmOpen(false)}\n                onConfirm={deletePost}\n            />\n        </>\n    )\n}\n\nconst DELETE_POST_MUTATION = gql`\n    mutation deletePost($postId : ID!){\n        deletePost(postId : $postId)\n    }\n`\nexport default DeleteButton","import React, {useContext} from 'react'   \nimport { Card, Icon, Label, Image, Button} from 'semantic-ui-react'\nimport './Post.css';\nimport {Link} from 'react-router-dom';\nimport { useMutation, gql } from '@apollo/client'\nimport { AuthContext } from '../../context/auth'\nimport LikeButton from '../../components/LikeButton.js'\nimport moment from 'moment'\nimport DeleteButton from '../../components/DeleteButton'\n\nconst Post = (props) => {\n\n    const { user } = useContext(AuthContext)\n    \n    const {\n        id,\n        username,\n        body,\n        createdAt,\n        likeCount,\n        commentCount,\n        likes\n    } = props.post\n\n    const [ deletePost, { loading, error }] = useMutation(DELETE_POST,{\n        variables : {postId : id},\n        update(_, result){\n            console.log(result)\n        }\n    })\n\n  \n    const commentPost = () => {\n        console.log(\"COMMENT\")\n    }\n\n    const onDeletePost = () => {\n        deletePost()\n        props.refreshPosts()\n    }\n    return (\n        <Card fluid>\n            <Card.Content>\n            <Image floated='right' size='mini' src='https://react.semantic-ui.com/images/avatar/large/molly.png' />\n            <Card.Header>{username}</Card.Header>\n            <Card.Meta as={Link} to={`/posts/${id}`}>\n                <span className='date'>{`Create on : ${moment(createdAt).fromNow()}`}</span>\n            </Card.Meta>\n            <Card.Description>\n                {body}\n            </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n            <a>\n            <LikeButton post={{id, likes,likeCount}} user={user}/>\n            <Button as='div' labelPosition='right' as={Link} to={`/post/${id}`}>\n                <Button color='blue' size=\"tiny\" basic>\n                    <Icon name='comments' />\n                </Button>\n                <Label as='a' basic color='blue' pointing='left'>\n                    {commentCount}\n                </Label>\n            </Button>\n            { user && username === user.username && <DeleteButton postId={id}/>}\n            \n            \n            </a>\n            </Card.Content>\n        </Card>\n    )\n}\n\nconst DELETE_POST = gql`\nmutation deletePost($postId : ID!){\n    deletePost(postId : $postId)\n}\n`\n\nexport default Post;","import {gql} from '@apollo/client';\n\nexport const FETCH_POSTS_QUERY = gql`\n{\n    getPosts{\n        id\n        body\n        createdAt\n        username\n        likeCount\n        likes{\n            username\n\n        }\n        commentCount\n        comments{\n            body\n        }\n    }\n}`\n\nexport const DELETE_POST = gql`\nmutation deletePost($postId : ID!){\n    deletePost(postId : $postId)\n}\n`","import { Form, FormInput, Button } from 'semantic-ui-react';\nimport React from 'react';\nimport { useForm } from '../utils/hooks'\nimport {FETCH_POSTS_QUERY} from '../utils/graphql'\nimport {gql, useMutation} from '@apollo/client'\n\nconst PostForm = props => {\n    const { values, onChange, onSubmit} = useForm(createPostCallBack,{\n        body : ''\n    })\n\n    const [ createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n        variables : values,\n        update(proxy, result){\n            const data = proxy.readQuery({\n                query : FETCH_POSTS_QUERY\n            })\n            data.getPosts = [result.data.createPost, ...data.getPosts]\n            proxy.writeQuery({query : FETCH_POSTS_QUERY, data})\n            console.log(result)\n            values.body = ''\n        },\n        onError(err){\n            console.log(err)\n        }\n    })\n\n    async function createPostCallBack(){\n        createPost()\n        \n    }\n\n    return (\n        <>\n        <Form onSubmit={onSubmit}>\n            <h2> Create a Post: </h2>\n            <Form.Field>\n                <FormInput \n                    placeholder=\"Hi World\"\n                    name=\"body\"\n                    onChange={onChange}\n                    value={values.body}\n                    error={error ? true : false}\n                    />\n                    <Button type=\"submit\" color=\"teal\">Submit</Button>\n            </Form.Field>\n        </Form>\n        {error && (\n            <div className=\"ui error message\" style={{marginBottom : 20}}>\n                <ul className='list'>\n                    <li>{error.graphQLErrors[0].message}</li>\n                </ul>\n            </div>\n        )}\n        </>\n    )\n}\n\nexport default PostForm\nconst CREATE_POST_MUTATION = gql`\nmutation createPost($body : String!){\n    createPost(body : $body){\n        id body createdAt username\n        likes {\n            id username createdAt\n        }\n        likeCount\n        comments {\n            id body createdAt\n        }\n        commentCount\n    }\n}\n`","import React, {useState, useEffect, useContext} from 'react';\nimport {useLazyQuery, gql} from '@apollo/client';\nimport { Grid, Image, Transition } from 'semantic-ui-react'\nimport Post from '../Post/Post'\nimport {FETCH_POSTS_QUERY} from '../../utils/graphql'\nimport {AuthContext} from '../../context/auth'\nimport './Home.css'\nimport PostForm from '../../components/PostForm'\n\nconst Home = props =>{ \n    const { user } = useContext(AuthContext)\n    // const {loading, data : { getPosts : posts }} = useQuery(FETCH_POSTS_QUERY);\n    const [fetchPostData, { loading, data }] = useLazyQuery(FETCH_POSTS_QUERY, {fetchPolicy: 'network-only'});\n    \n    useEffect(() => {\n        console.log(\"FETCHING POSTS\")\n        fetchPostData();\n        console.log(\"FETCHED POSTS\")\n    },[])\n\n    return (\n        <div className='Home'>\n           <Grid columns='three' divided>\n               <Grid.Row className='page-title'> \n                   <h1>Recent Posts</h1>\n               </Grid.Row>\n                <Grid.Row>\n                    { user  && (\n                        <Grid.Column>\n                            <PostForm refreshPosts={fetchPostData}/>\n                        </Grid.Column>\n                    )}\n                    {loading ? (\n                        <h1>Loading ... </h1>\n                    ):\n                    (\n                        <Transition.Group>\n                        {data && data.getPosts.map(post => (\n                             <Grid.Column style={{marginBottom : '20px'}} key={post.id}>\n                                 <Post refreshPosts={fetchPostData} post={post} />\n                             </Grid.Column>\n                        ))}\n                        </Transition.Group>\n                    )}\n                \n                </Grid.Row>\n            </Grid>\n        </div>\n    )\n}\n\n\nexport default Home;","import React, { useContext, useState } from 'react'\nimport { Menu, Segment } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { AuthContext} from '../context/auth'\nconst NavBar = props => { \n    const { user, logout} = useContext(AuthContext);\n    const handleItemClick = (e, { name }) => setActiveItem(name)\n    const pathname = window.location.pathname;\n    const path = pathname === '/' ? 'home' : pathname.substr(1);\n    const [ activeItem, setActiveItem] = useState(path)\n    const menuBar = !user ? \n    (\n        <div>\n            <Menu pointing secondary color='teal' size=\"massive\">\n                <Menu.Item\n                name='home'\n                active={activeItem === 'home'}\n                onClick={handleItemClick}\n                as={Link}\n                to=\"/\"\n                />\n                <Menu.Menu position='right'>\n                \n                <Menu.Item\n                    name='login'\n                    active={activeItem === 'login'}\n                    onClick={handleItemClick}\n                    as={Link}\n                    to='/login'\n                />\n                <Menu.Item\n                    name='register'\n                    active={activeItem === 'register'}\n                    onClick={handleItemClick}\n                    as={Link}\n                    to='/register'\n                />\n                \n               \n                </Menu.Menu>\n            </Menu>\n        </div>\n    ) : \n    (\n        <div>\n            <Menu pointing secondary color='teal' size=\"massive\">\n                <Menu.Item\n                name={user.username}\n                active\n                as={Link}\n                to=\"/\"\n                />\n                <Menu.Menu position='right'>\n                \n                <Menu.Item\n                    name='logout'\n                    onClick={logout}\n                    as={Link}\n                    to='/login'\n                />\n               \n                </Menu.Menu>\n            </Menu>\n        </div>\n    )\n    \n    return menuBar;\n}\n\nexport default NavBar;","import React, {useContext} from 'react';\nimport { Route, Redirect} from 'react-router-dom';\n\nimport {AuthContext} from '../context/auth'\nconst AuthRoute = ({ component : Component, ...rest}) => {\n    const {user} = useContext(AuthContext);\n    return (\n        <Route \n        {...rest}\n        render={props => {\n            return user ? <Redirect to=\"/\" /> : <Component {...props}/>\n        }}/>\n    )\n}\n\nexport default AuthRoute;","import gql from 'graphql-tag';\nimport React, {useContext} from 'react';\nimport {useQuery} from '@apollo/client'\nimport { Card, Grid, Image, Button, Icon, Label } from 'semantic-ui-react';\nimport moment from 'moment'\nimport LikeButton from '../components/LikeButton';\nimport {AuthContext} from '../context/auth'\nimport DeleteButton from '../components/DeleteButton'\n\nconst SinglePost = props => {\n    const postId = props.match.params.postId\n    \n    const user = useContext(AuthContext)\n    console.log(postId)\n    const { data } = useQuery(FETCH_POST_QUERY, {\n        variables : {\n            postId\n        }\n    })\n    let postMarkup;\n    if(!data){\n        postMarkup = <p>Loading</p>\n    }else{\n        const {\n            id, body, createdAt, username, comments, likes, likeCount, commentCount \n        } = data.getPost;\n    console.log(user.user.username, username)\n\n    const deletePostCallback = () => {\n        props.history.push('/')\n   }\n\n        postMarkup = (\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={2}>\n                    <Image floated='right' size='small' src='https://react.semantic-ui.com/images/avatar/large/molly.png' />\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                        <Card fluid>\n                            <Card.Content>\n                                <Card.Header>{username}</Card.Header>\n                                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                                <Card.Description>{body}</Card.Description>\n                            </Card.Content>\n                            <hr/>\n                            <Card.Content extra>\n                                <LikeButton user={user} post={{id, likeCount, likes}}/>\n                                <Button \n                                    as=\"div\"\n                                    labelPositon=\"right\"\n                                    onClick={() => console.log(\"Comment on Post\")}\n                                    >\n                                        <Button basic color=\"blue\">\n                                            <Icon name=\"comments\"/>\n                                        </Button>\n                                        <Label basic color=\"blue\" pointing=\"left\">\n                                            {commentCount}\n                                        </Label>\n                                    </Button>\n                                    {user && user.user.username === username && <DeleteButton callback={deletePostCallback} postId={postId}/>}\n                            </Card.Content>\n                        </Card>\n                    </Grid.Column>\n\n                </Grid.Row>\n            </Grid>\n        )\n    }\n\n    return postMarkup\n\n}\n\nconst FETCH_POST_QUERY = gql`\n    query($postId : ID!){\n        getPost(postId : $postId){\n            id\n            body\n            createdAt\n            username\n            likes{\n                username\n            }\n            commentCount\n            comments{\n                id\n                createdAt\n                body\n            }\n        }\n    }\n`\nexport default SinglePost","import React, {useState} from 'react';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Container } from 'semantic-ui-react'\nimport './App.css';\nimport Login from './pages/Login/Login';\nimport Register from './pages/Register/Register';\nimport Home from './pages/Home/Home'\nimport NavBar from './components/NavBar';\nimport {AuthProvider}  from './context/auth'\nimport AuthRoute from './utils/AuthRoute'\nimport SinglePost from './pages/SinglePost'\nconst App = props => {\n\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <NavBar />\n          <Route exact path='/' component={Home}/>\n          <AuthRoute exact path='/login' component={Login}/>\n          <AuthRoute exact path='/register' component={Register} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport App from './App';\nimport {ApolloClient, ApolloLink, HttpLink} from '@apollo/client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n// import {HttpLink} from 'apollo-link-http';\nimport {ApolloProvider} from \"@apollo/client\";\n\nconst httpLink = new HttpLink({\n    uri : 'https://social-media-react-merng.herokuapp.com/graphql'\n})\n\nconst authLink = new ApolloLink((operation, forward) => {\n    const token = localStorage.getItem('jwtToken');\n    \n    operation.setContext({\n        headers : {\n            Authorization : token ? `Bearer ${token}` : ''\n        }\n    });\n    return forward(operation)\n})\n\nconst client = new ApolloClient({\n    link : authLink.concat(httpLink),\n    cache : new InMemoryCache()\n})\n\nexport default (\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ApolloProvider from './ApolloProvider';\n\nReactDOM.render(\n  ApolloProvider,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}